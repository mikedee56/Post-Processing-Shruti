name: Production Deployment

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: asr-post-processor
  PYTHON_VERSION: '3.10'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-locked.txt
        pip install pytest pytest-cov flake8 black
        
    - name: Run code formatting check
      run: |
        black --check src/ tests/
        
    - name: Run linting
      run: |
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Run tests with coverage
      run: |
        export PYTHONPATH=$PWD/src
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan with Bandit
      run: |
        pip install bandit
        bandit -r src/ -f json -o security-report.json || true
        
    - name: Run dependency vulnerability check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
        
    - name: Deploy to staging
      run: |
        export IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
        envsubst < deploy/kubernetes/app-deployment.yaml | kubectl apply -f -
        kubectl wait --for=condition=available --timeout=300s deployment/asr-post-processor -n staging
        
    - name: Run staging tests
      run: |
        kubectl exec deployment/asr-post-processor -n staging -- python -m pytest tests/test_end_to_end_production.py -v

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}
        
    - name: Deploy to production
      run: |
        export IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
        envsubst < deploy/kubernetes/app-deployment.yaml | kubectl apply -f -
        kubectl wait --for=condition=available --timeout=600s deployment/asr-post-processor -n production
        
    - name: Run production smoke tests
      run: |
        kubectl exec deployment/asr-post-processor -n production -- python -c "import src.utils.health_checker; src.utils.health_checker.check_health()"
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: "🚀 Production deployment successful for ${{ github.ref }}"
      if: success()
      
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: "❌ Production deployment failed for ${{ github.ref }}"
      if: failure()